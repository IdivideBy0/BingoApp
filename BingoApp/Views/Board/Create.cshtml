@model BingoApp.Helpers.BdHelper

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Create</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="text-center">

        @{
            if (@Model.totalBalls != 0)
            {

                @Html.ActionLink("Draw Ball", "Create", null, new { @class = "btn btn-primary" })

            }
        }
    </div>
    <table id="bingoBoard" class="table table-dark table-bordered">
        <tr>
        </tr>

        <tr>
            <td style="background-color: red">B</td>
            @foreach (var item in Model.Brow)
            {
                <td>

                    @{
                        string tmp = item.ToString();

                    }@tmp

                </td>
            }
        </tr>

        <tr>
            <td style="background-color: orange">I</td>
            @foreach (var item in Model.Irow)
            {
                <td>

                    @{
                        string tmp = item.ToString();

                    }@tmp

                </td>
            }
        </tr>

        <tr>
            <td style="background-color: yellow">N</td>
            @foreach (var item in Model.Nrow)
            {
                <td>

                    @{
                        string tmp = item.ToString();

                    }@tmp

                </td>
            }
        </tr>

        <tr>
            <td style="background-color:yellowgreen">G</td>
            @foreach (var item in Model.Grow)
            {
                <td>

                    @{
                        string tmp = item.ToString();

                    }@tmp

                </td>
            }
        </tr>

        <tr>
            <td style="background-color: lightseagreen">O</td>
            @foreach (var item in Model.Orow)
            {
                <td>

                    @{
                        string tmp = item.ToString();

                    }@tmp

                </td>
            }
        </tr>

    </table>
    <!-- Card table -->
    <table id="playersCard" class="table table-bordered">
        <tr>
            <th>B</th>
            <th>I</th>
            <th>N</th>
            <th>G</th>
            <th>O</th>
        </tr>
        <tr>
            <td>@Model.intRowB[0]</td>
            <td>@Model.intRowI[0]</td>
            <td>@Model.intRowN[0]</td>
            <td>@Model.intRowG[0]</td>
            <td>@Model.intRowO[0]</td>
        </tr>
        <tr>
            <td>@Model.intRowB[1]</td>
            <td>@Model.intRowI[1]</td>
            <td>@Model.intRowN[1]</td>
            <td>@Model.intRowG[1]</td>
            <td>@Model.intRowO[1]</td>
        </tr>
        <tr>
            <td>@Model.intRowB[2]</td>
            <td>@Model.intRowI[2]</td>
            <td>FREE</td>
            <td>@Model.intRowG[2]</td>
            <td>@Model.intRowO[2]</td>
        </tr>
        <tr>
            <td>@Model.intRowB[3]</td>
            <td>@Model.intRowI[3]</td>
            <td>@Model.intRowN[3]</td>
            <td>@Model.intRowG[3]</td>
            <td>@Model.intRowO[3]</td>
        </tr>
        <tr>
            <td>@Model.intRowB[4]</td>
            <td>@Model.intRowI[4]</td>
            <td>@Model.intRowN[4]</td>
            <td>@Model.intRowG[4]</td>
            <td>@Model.intRowO[4]</td>
        </tr>

    </table>
    @{
        var ballnum = @Model.lastCalledBall.Key;
        var ballletter = @Model.lastCalledBall.Value;
    }
    <div class="text-center">
        <div style="width: 50%; float: left;">
            <h1>Balls remaining -> @Model.totalBalls</h1>
        </div>
        <div style="width: 50%; float: left;">
            <h1>Ball Called -> @ballletter @ballnum </h1>
        </div>
    </div>


    <div class="text-center">
        @Html.ActionLink("New Board", "Delete", null, new { @class = "btn btn-primary" })
    </div>
    <p id="boardInfo"></p>
    <p id="playerInfo"></p>
    <p id="genInfo"></p>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")

    <script>

        // scan the ball called table and look for a match on the scorecard. If there is a match, change color of the placeholder on the scorecard.


        var called = [];
        var playersvalues = [];

        function GetCellValues() {
            var board = document.getElementById('bingoBoard');
            for (var br = 0, n = board.rows.length; br < n; br++) {
                for (var bc = 1, m = board.rows[br].cells.length; bc < m; bc++) {
                    // alert(table.rows[r].cells[c].innerHTML);
                    // filter out B, I, N, G, O
                    var boardCellContent = board.rows[br].cells[bc].innerHTML.trim();
                    // if (boardCellContent != 'B' || boardCellContent != 'I' || boardCellContent != 'N' || boardCellContent != 'G' || boardCellContent != 'O') {
                    //alert(cellContent); /* cool, bingo is filtered let's scan the players card */
                    if (boardCellContent != 0) {
                        called.push(boardCellContent);


                        playersvalues.length = 0; // reset array
                        var card = document.getElementById('playersCard');
                        for (var pcr = 1, y = card.rows.length; pcr < y; pcr++) {
                            for (var pcc = 0, x = card.rows[pcr].cells.length; pcc < x; pcc++) {
                                var playerCellContent = card.rows[pcr].cells[pcc].innerHTML;
                                playersvalues.push(playerCellContent);

                                if (playerCellContent == 'FREE') {
                                    card.rows[pcr].cells[pcc].style.backgroundColor = "red";
                                }
                                if (playerCellContent == boardCellContent) {
                                    //alert('match found' + playerCellContent); // THIS CODE WORKS!! FINALLY DETECTED A MATCH!!!!!
                                    // TODO change color of this cell x[0].style.backgroundColor = "yellow";
                                    card.rows[pcr].cells[pcc].style.backgroundColor = "red";
                                }


                            }
                        }


                    }

                    // }
                }
            }

            // for debugging only
            //boardInfo.innerHTML = called;
            //playerInfo.innerHTML = playersvalues;
        }





        window.onload = (event) => {

            GetCellValues();
        };



    </script>

</body>
</html>
